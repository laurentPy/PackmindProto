# .github/workflows/packmind-check.yml
name: Packmind ADR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  packmind:
    runs-on: ubuntu-latest
    steps:
      # 1) Check out this repo (contains cli/packmind_cli.py, workflows, etc.)
      - name: Checkout PackmindProto
        uses: actions/checkout@v4
        with:
          path: packmind

      # 2) Check out the “vanilla” demo app as its own repo under ./vanilla
      - name: Checkout Vanilla App
        uses: actions/checkout@v4
        with:
          repository: laurentPy/PackmindProto-Vanilla
          path: vanilla

      # 3) Set up Python for the Packmind CLI
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install CLI dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyyaml

      # 4) Upload Prettier (or other formatting) SARIF to Packmind
      - name: Upload Prettier SARIF
        working-directory: packmind
        run: |
          python cli/packmind_cli.py \
            --sarif ../vanilla/report.sarif \
            --manifest-url http://localhost:8000/manifest \
            --upload-url   http://localhost:8000/api/upload \
            --repo         "${{ github.repository }}"

      # 5) Set up JDK and run ArchUnit tests in the vanilla app
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Gradle test (ArchUnit)
        working-directory: vanilla
        run: ./gradlew --no-daemon clean test

      # 6) Convert JUnit XML → SARIF
      - name: Convert JUnit XML to SARIF
        run: |
          python -m pip install junit2sarif
          junit2sarif vanilla/build/test-results/test --output report_archunit.sarif

      # 7) Upload ArchUnit SARIF to Packmind
      - name: Upload ArchUnit SARIF
        working-directory: packmind
        run: |
          python cli/packmind_cli.py \
            --sarif report_archunit.sarif \
            --manifest-url http://localhost:8000/manifest \
            --upload-url   http://localhost:8000/api/upload \
            --repo         "${{ github.repository }}"

      # 8) Generate GitHub annotations JSON
      - name: Generate annotations.json
        id: packmind
        working-directory: packmind
        run: |
          python cli/packmind_cli.py \
            --sarif report_archunit.sarif report.sarif \
            --manifest-url http://localhost:8000/manifest \
            --upload-url   http://localhost:8000/api/upload \
            --repo         "${{ github.repository }}" \
            --output       annotations.json
          echo "::set-output name=annotations::$(jq -c . < annotations.json)"

      # 9) Post a GitHub Check with inline annotations
      - name: Publish Packmind ADR Check
        uses: peter-evans/create-check@v2
        with:
          token: ${{ secrets.PACKMIND_TOKEN }}
          name: Packmind ADR Check
          status: completed
          conclusion: ${{ steps.packmind.outcome == 'success' && 'success' || 'failure' }}
          output: |
            title: Packmind ADR Violations
            summary: ${{ fromJson(steps.packmind.outputs.annotations).length }} violations found
            annotations: ${{ steps.packmind.outputs.annotations }}
